package sqlg3.core;

import java.sql.SQLException;

/**
 * Utility class to run {@link ITransaction}s safely.
 * @param <R> type of a value computed by the transactional block
 * todo: make it functional interface for pretty code
 */
public abstract class TransactionRunnable<R> implements ISimpleTransaction {

    // todo: remove this mutable crap!!!
    private boolean finished = false;
    private ITransaction trans = null;

    private void assertNotFinished() {
        if (finished)
            throw new IllegalStateException("Transaction already finished");
    }

    /**
     * Commits transaction
     */
    protected final void commit() throws SQLException {
        assertNotFinished();
        trans.commit();
        finished = true;
        trans = null;
    }

    /**
     * Rolls back transaction
     */
    protected final void rollback() throws SQLException {
        assertNotFinished();
        trans.rollback();
        finished = true;
        trans = null;
    }

    /**
     * Returns data access interface generated by preprocessor running in the transaction.
     *
     * @param iface interface class
     * @return data access interface implementation
     */
    public final <T extends IDBCommon> T getInterface(Class<T> iface) {
        return trans.getInterface(iface);
    }

    /**
     * Implement this method to define which block to run in transaction.
     *
     * @return computed value
     */
    protected abstract R run() throws SQLException;

    /**
     * Run block in transaction atomically: block is either committed or rolled back. It is more safe to use than
     * {@link ITransaction} manually since you can forget to finish transaction.
     * Anyway you should call either {@link TransactionRunnable#commit()} or
     * {@link TransactionRunnable#rollback()} at the end of block, or else transaction will be rolled
     * back automatically.
     * <p>
     * Example:
     * <pre>
     * TransactionRunnable.runInTransaction(db, new TransactionRunnable&lt;Void&gt;() {
     *     public Void run() {
     *         ITest testIface = getInterface(ITest.class);
     *         // work with testIFace in the transaction
     *         commit();
     *         return null;
     *     }
     * });
     * </pre>
     */
    public static <T> T runInTransaction(SQLGLogger logger, IDBInterface db, TransactionRunnable<T> runnable) throws SQLException {
        ITransaction trans = db.getTransaction();
        try {
            runnable.finished = false;
            runnable.trans = trans;
            T ret = runnable.run();
            if (!runnable.finished) // todo: commit by default
                throw new IllegalStateException("Transaction must be explicitly committed or rolled back - rolling back");
            return ret;
        } finally {
            if (!runnable.finished) {
                try {
                    runnable.rollback();
                } catch (SQLException ex) {
                    logger.error(ex); // todo: remove logger
                }
            }
        }
    }
}
